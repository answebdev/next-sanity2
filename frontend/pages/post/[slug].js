import Link from 'next/link';
import Head from 'next/head';
import groq from 'groq';
import imageUrlBuilder from '@sanity/image-url';
import { PortableText } from '@portabletext/react';
import client from '../../client';
import { Code } from '../../components/Code';
import { format } from 'date-fns';
import styles from '../../styles/Home.module.css';
import classes from '../../styles/OnePost.module.css';

// const serializers = {
//     marks: {
//         link: ({ children, mark }) =>
//             mark.blank ? (
//                 <a href={mark.href} target='_blank'>
//                     {children}
//                 </a>
//             ) : (
//                 <a href={mark.href}>{children}</a>
//             )
//     }
// };

function urlFor(source) {
    return imageUrlBuilder(client).image(source);
}

const ptComponents = {
    types: {
        image: ({ value }) => {
            if (!value?.asset?._ref) {
                return null;
            }
            return (
                <div style={{ display: 'flex', justifyContent: 'center', textAlign: 'center' }}>
                    <img className={styles.pImage}
                        alt={value.alt || ' '}
                        loading='lazy'
                        // src={urlFor(value).width(320).height(240).fit('max').auto('format')}
                        src={urlFor(value).fit('max').auto('format')}
                    />
                    <br />
                </div>
                //    <div>
                //      <img
                //         alt={value.alt || ' '}
                //         loading='lazy'
                //         src={urlFor(value).width(320).height(240).fit('max').auto('format')}
                //     />
                //     <br />
                //    </div>
            );
        },
        code: (props) => {
            return (<Code language={props.value.language} code={props.value.code} highlightedLines={props.value.highlightedLines} />);
        },
        // marks: {
        //     link: ({ children, mark }) => {
        //         mark.blank ? (
        //             <a href={mark.href} target='_blank' rel='noopener noreferrer'>
        //                 {children}
        //             </a>
        //         ) : (
        //             <a href={mark.href}>{children}</a>
        //         );
        //     },
        // }
    },
};

const Post = ({ post }) => {
    const {
        title = 'Missing title',
        name = 'Missing name',
        categories,
        authorImage,
        mainImage,
        publishedAt,
        body = [],
    } = post;

    const titleTag = `Bacon Blog | ${title}`;

    return (
        <>
            <Head>
                <title>{titleTag}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div
                className={classes.HeroImage}
                style={{
                    backgroundImage: `linear-gradient( 0deg, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(${urlFor(
                        mainImage
                    ).url()})`,
                }}
            >
                <div className={classes.HeroContainer}>
                    <h1 className={classes.HeroHeader}>
                        <span className={classes.HeroHeaderSpan}>{title}</span>
                    </h1>
                </div>
            </div>

            <article>
                <div style={{ display: 'flex', justifyContent: 'center', paddingTop: '2em', textAlign: 'center' }}>
                    <div>
                        <h1 className={styles.postTitle}>{title}</h1>
                        {categories && (
                            <div>
                                {categories.map(
                                    (category) => (
                                        <span className={styles.tagBadge}>{category}</span>
                                    )
                                )}
                            </div>
                        )}

                        <p className={styles.postAuthor}>By {name}</p>
                        {authorImage && (
                            <div>
                                <img
                                    className={styles.Avatar}
                                    src={urlFor(authorImage).width(300).url()}
                                    alt={`${name}`}
                                />
                            </div>
                        )}
                    </div>
                </div>

                <div className={styles.pText}>
                    <p className={styles.date}>{format(new Date(publishedAt), 'MMMM dd, yyyy')}</p>
                    <PortableText value={body} components={ptComponents} />

                    <br />

                    <Link style={{ color: 'tomato' }} href='/'>Home</Link>
                </div>
            </article>
        </>
    );
};

const query = groq`*[_type == "post" && slug.current == $slug][0]{
  title,
  publishedAt,
  mainImage,
  "name": author->name,
  "categories": categories[]->title,
  "authorImage": author->image,
  body
}`;

export async function getStaticPaths() {
    const paths = await client.fetch(
        groq`*[_type == "post" && defined(slug.current)][].slug.current`
    );

    return {
        paths: paths.map((slug) => ({ params: { slug } })),
        fallback: 'blocking'
    };
}

export async function getStaticProps(context) {
    // It's important to default the slug so that it doesn't return "undefined"
    const { slug = '' } = context.params;
    const post = await client.fetch(query, { slug });
    return {
        props: {
            post,
        },
        revalidate: 20,
    };
}

export default Post;
